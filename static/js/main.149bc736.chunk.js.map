{"version":3,"sources":["hooks/context.js","components/TodoItem.js","components/TodoList.js","hooks/reducer.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","_ref","title","id","completed","dispatch","useContext","classes","push","react_default","a","createElement","className","join","type","checked","onChange","payload","onClick","TodoList","todos","map","item","Object","assign","key","reducer","state","action","concat","toConsumableArray","Date","now","todo","filter","App","_useReducer","useReducer","JSON","parse","localStorage","getItem","stringify","_useReducer2","slicedToArray","_useState","useState","_useState2","todoTitle","setTodoTitle","useEffect","setItem","Provider","value","e","target","onKeyPress","event","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wKAEaA,EAAUC,IAAMC,gBCEd,SAASC,EAATC,GAA0C,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,GAAIC,EAAYH,EAAZG,UACpCC,EAAYC,qBAAWT,GAAvBQ,SAEDE,EAAU,CAAC,QAMjB,OAJGH,GACDG,EAAQC,KAAK,aAIbC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAAQM,KAAK,MAC1BJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEG,KAAK,WACLC,QAASX,EACTY,SAAU,kBAAIX,EAAS,CACrBS,KAAM,SACNG,QAASd,OAEbM,EAAAC,EAAAC,cAAA,YAAOT,GAEPO,EAAAC,EAAAC,cAAA,KACEC,UAAU,0BACVM,QAAS,kBAAIb,EAAS,CACpBS,KAAM,SACNG,QAASd,MAJb,YCrBO,SAASgB,EAATlB,GAA2B,IAARmB,EAAQnB,EAARmB,MAChC,OACEX,EAAAC,EAAAC,cAAA,UACGS,EAAMC,IAAI,SAAAC,GAAI,OAAIb,EAAAC,EAAAC,cAACX,EAADuB,OAAAC,OAAA,CAAUC,IAAKH,EAAKnB,IAAQmB,kBCPtCI,EAAA,SAASC,EAAOC,GAC3B,OAAQA,EAAOd,MACX,IAAK,MACD,SAAAe,OAAAN,OAAAO,EAAA,EAAAP,CACOI,GADP,CAEI,CACIxB,GAAI4B,KAAKC,MACT9B,MAAO0B,EAAOX,QACdb,WAAW,KAGvB,IAAK,SACD,OAAOuB,EAAMN,IAAI,SAAAY,GAIb,OAHIA,EAAK9B,KAAOyB,EAAOX,UACnBgB,EAAK7B,WAAa6B,EAAK7B,WAEpB6B,IAEf,IAAK,SACD,OAAON,EAAMO,OAAO,SAAAD,GAAI,OAAIA,EAAK9B,KAAOyB,EAAOX,UACnD,QACI,OAAOU,ICfJ,SAASQ,IAAM,IAAAC,EACFC,qBAAWX,EAASY,KAAKC,MAAMC,aAAaC,QAAQ,UAAYH,KAAKI,UAAU,MAD7EC,EAAApB,OAAAqB,EAAA,EAAArB,CAAAa,EAAA,GACrBT,EADqBgB,EAAA,GACdtC,EADcsC,EAAA,GAAAE,EAEMC,mBAAS,IAFfC,EAAAxB,OAAAqB,EAAA,EAAArB,CAAAsB,EAAA,GAErBG,EAFqBD,EAAA,GAEVE,EAFUF,EAAA,GAI5BG,oBAAU,WACRV,aAAaW,QAAQ,QAASb,KAAKI,UAAUf,KAC7C,CAACA,IAYH,OACElB,EAAAC,EAAAC,cAACd,EAAQuD,SAAT,CAAkBC,MAAO,CACvBhD,aAEAI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SACAG,KAAK,OACLuC,MAAOL,EACPhC,SAAU,SAACsC,GAAD,OAAKL,EAAaK,EAAEC,OAAOF,QACrCG,WArBM,SAACC,GACE,UAAdA,EAAMhC,MACPpB,EAAS,CACPS,KAAM,MACNG,QAAS+B,IAEXC,EAAa,QAgBPxC,EAAAC,EAAAC,cAAA,2BAEFF,EAAAC,EAAAC,cAACQ,EAAD,CAAUC,MAAOO,YC1BP+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACwB,EAAD,MAAS8B,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.149bc736.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext()","import React, { useContext } from 'react';\n\nimport {Context} from '../hooks/context';\n\nexport default function TodoItem({title, id, completed}) {\n  const {dispatch} = useContext(Context)\n\n  const classes = ['todo']\n\n  if(completed){\n    classes.push('completed')\n  }\n\n  return (\n    <li className={classes.join(' ')}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={()=>dispatch({\n            type: 'toggle',\n            payload: id\n          })}/>\n        <span>{title}</span>\n\n        <i \n          className=\"material-icons red-text\"\n          onClick={()=>dispatch({\n            type: 'remove',\n            payload: id\n          })}>\n          delete\n        </i>\n      </label>\n    </li>\n  )\n}","import React from 'react';\n\nimport TodoItem from './TodoItem';\n\nexport default function TodoList({todos}) {\n  return (\n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\n    </ul>\n  )\n}","export default function(state, action) {\n    switch (action.type){\n        case 'add':\n            return [\n                ...state,\n                {\n                    id: Date.now(),\n                    title: action.payload,\n                    completed: false\n                }\n            ]\n        case 'toggle':\n            return state.map(todo => {\n                if (todo.id === action.payload){\n                    todo.completed = !todo.completed\n                }\n                return todo\n            })\n        case 'remove':\n            return state.filter(todo => todo.id !== action.payload)\n        default:\n            return state\n    }\n}","import React, { useState, useEffect, useReducer } from 'react';\n\nimport TodoList from './components/TodoList';\nimport {Context} from './hooks/context';\nimport reducer from './hooks/reducer';\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, JSON.parse(localStorage.getItem('todos') || JSON.stringify([])))\n  const [todoTitle, setTodoTitle] = useState('')\n\n  useEffect(()=>{\n    localStorage.setItem('todos', JSON.stringify(state))\n  },[state])\n\n  const addTodo = (event) => {\n    if(event.key === 'Enter'){\n      dispatch({\n        type: 'add',\n        payload: todoTitle\n      })\n      setTodoTitle('')\n    }\n  }\n\n  return (\n    <Context.Provider value={{\n      dispatch\n    }}>\n      <div className=\"container\">\n        <h1>Todo app</h1>\n          <div className=\"input-field\">\n            <input \n            type=\"text\" \n            value={todoTitle}\n            onChange={(e)=>setTodoTitle(e.target.value)}\n            onKeyPress={addTodo} />\n            <label>Todo name</label>\n          </div>\n          <TodoList todos={state} />\n      </div>\n    </Context.Provider>\n  );\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}